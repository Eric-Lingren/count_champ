import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

part 'basic_strategey_settings_state.dart';

class BasicStrategeySettingsCubit extends Cubit<BasicStrategeySettingsState> {
  var bsAllHands;
  var bsHardHands;
  var bsSoftHands;
  var bsSplitHands;
  var bsIllustrious18;
  var bsfab4;
  var bsInsurance;
  BasicStrategeySettingsCubit()
      : super(BasicStrategeySettingsState(
          // * Initial Default Game Rules:
          canDas: false,
          canDoubleAny2: true,
          canResplitPairs: true,
          canSplitAces: true,
          canHitAfterSplittingAces: false,
          dealerHitsSoft17: true,
          canSurrender: false,
          dealerPeeks: true,
          deckQuantity: 8,
          deckPenetration: 80,
          practiceBsAllHands: true,
          practiceBsHardHands: false,
          practiceBsSoftHands: false,
          practiceBsSplitHands: false,
          practiceIllustrious18: false,
          practiceFab4: false,
          practiceInsurance: false,
        ));

  void toggleDas(value) => emit(BasicStrategeySettingsState(
        canDas: value,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void toggleCanDoubleAny2(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: value,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void toggleCanResplitPairs(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: value,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void toggleCanSplitAces(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: value,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void toggleCanHitAfterSplitingAces(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: value,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void toggleDealerHitsSoft17(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: value,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void toggleCanSurrender(value) => {
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: value,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: state.practiceBsAllHands,
          practiceBsHardHands: state.practiceBsHardHands,
          practiceBsSoftHands: state.practiceBsSoftHands,
          practiceBsSplitHands: state.practiceBsSplitHands,
          practiceIllustrious18: state.practiceIllustrious18,
          practiceFab4: state.practiceFab4,
          practiceInsurance: state.practiceInsurance,
        ))
      };
  void toggleDealerPeeks(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: value,
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void setDeckQuantity(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: value,
        deckPenetration: state.deckPenetration,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void setDeckPenetration(value) => emit(BasicStrategeySettingsState(
        canDas: state.canDas,
        canResplitPairs: state.canResplitPairs,
        canDoubleAny2: state.canDoubleAny2,
        canSplitAces: state.canSplitAces,
        canHitAfterSplittingAces: state.canHitAfterSplittingAces,
        dealerHitsSoft17: state.dealerHitsSoft17,
        canSurrender: state.canSurrender,
        dealerPeeks: state.dealerPeeks,
        deckQuantity: state.deckQuantity,
        deckPenetration: value,
        practiceBsAllHands: state.practiceBsAllHands,
        practiceBsHardHands: state.practiceBsHardHands,
        practiceBsSoftHands: state.practiceBsSoftHands,
        practiceBsSplitHands: state.practiceBsSplitHands,
        practiceIllustrious18: state.practiceIllustrious18,
        practiceFab4: state.practiceFab4,
        practiceInsurance: state.practiceInsurance,
      ));
  void togglePracticeBsAllHands(value) => {
        if (value)
          {bsHardHands = false, bsSoftHands = false, bsSplitHands = false, bsIllustrious18 = false, bsfab4 = false, bsInsurance = false},
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: state.canSurrender,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: value,
          practiceBsHardHands: bsHardHands,
          practiceBsSoftHands: bsSoftHands,
          practiceBsSplitHands: bsSplitHands,
          practiceIllustrious18: bsIllustrious18,
          practiceFab4: bsfab4,
          practiceInsurance: bsInsurance,
        ))
      };
  void togglePracticeBsHardHands(value) => {
        if (value) {bsAllHands = false, bsIllustrious18 = false, bsfab4 = false, bsInsurance = false},
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: state.canSurrender,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: bsAllHands,
          practiceBsHardHands: value,
          practiceBsSoftHands: false,
          practiceBsSplitHands: false,
          practiceIllustrious18: bsIllustrious18,
          practiceFab4: bsfab4,
          practiceInsurance: bsInsurance,
        ))
      };
  void togglePracticeBsSoftHands(value) => {
        if (value) {bsAllHands = false, bsIllustrious18 = false, bsfab4 = false, bsInsurance = false},
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: state.canSurrender,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: bsAllHands,
          practiceBsHardHands: false,
          practiceBsSoftHands: value,
          practiceBsSplitHands: false,
          practiceIllustrious18: bsIllustrious18,
          practiceFab4: bsfab4,
          practiceInsurance: bsInsurance,
        ))
      };
  void togglePracticeBsSplitHands(value) => {
        if (value) {bsAllHands = false, bsIllustrious18 = false, bsfab4 = false, bsInsurance = false},
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: state.canSurrender,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: bsAllHands,
          practiceBsHardHands: false,
          practiceBsSoftHands: false,
          practiceBsSplitHands: value,
          practiceIllustrious18: bsIllustrious18,
          practiceFab4: bsfab4,
          practiceInsurance: bsInsurance,
        ))
      };
  void toggleIllustrious18(value) => {
    if (value)
          {bsAllHands = false, bsHardHands = false, bsSoftHands = false, bsSplitHands = false, bsfab4 = false, bsInsurance = false},
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: state.canSurrender,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: bsAllHands,
          practiceBsHardHands: bsHardHands,
          practiceBsSoftHands: bsSoftHands,
          practiceBsSplitHands: bsSplitHands,
          practiceIllustrious18: value,
          practiceFab4: bsfab4,
          practiceInsurance: bsInsurance,
        )),
      };
  void toggleFab4(value) => {
    if (value)
          {bsAllHands = false, bsHardHands = false, bsSoftHands = false, bsSplitHands = false, bsIllustrious18 = false, bsInsurance = false},
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: state.canSurrender,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: bsAllHands,
          practiceBsHardHands: bsHardHands,
          practiceBsSoftHands: bsSoftHands,
          practiceBsSplitHands: bsSplitHands,
          practiceIllustrious18: bsIllustrious18,
          practiceFab4: value,
          practiceInsurance: bsInsurance,
        )),
        if (value)
          {
            toggleCanSurrender(value),
          }
      };
  void toggleInsurance(value) => {
    if (value)
          {bsAllHands = false, bsHardHands = false, bsSoftHands = false, bsSplitHands = false, bsIllustrious18 = false, bsfab4 = false},
        emit(BasicStrategeySettingsState(
          canDas: state.canDas,
          canResplitPairs: state.canResplitPairs,
          canDoubleAny2: state.canDoubleAny2,
          canSplitAces: state.canSplitAces,
          canHitAfterSplittingAces: state.canHitAfterSplittingAces,
          dealerHitsSoft17: state.dealerHitsSoft17,
          canSurrender: state.canSurrender,
          dealerPeeks: state.dealerPeeks,
          deckQuantity: state.deckQuantity,
          deckPenetration: state.deckPenetration,
          practiceBsAllHands: bsAllHands,
          practiceBsHardHands: bsHardHands,
          practiceBsSoftHands: bsSoftHands,
          practiceBsSplitHands: bsSplitHands,
          practiceIllustrious18: bsIllustrious18,
          practiceFab4: bsfab4,
          practiceInsurance: value,
        )),
      };

  getRules() => state;
}
