import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

part 'count_settings_state.dart';

class CountSettingsCubit extends Cubit<CountSettingsState> {

  CountSettingsCubit()
      : super(CountSettingsState(
          // * Initial Default Game Rules:
          deckQuantity: 8.0,
          deckPenetration: 80.0,
          showCount: true,
          speedCountEnabled: false,
          cardsPerSecond: 1,
          isSpeedCountRunning: false,
          hiLoEnabled: true,
          hiOpt1Enabled: false,
          hiOpt2Enabled: false,
          halvesEnabled: false,
          koEnabled: false,
          red7Enabled: false,
          zenEnabled: false,
          omega2Enabled: false,
          thorps10Enabled: false,
          acefiveEnabled: false,
          kiss1Enabled: false,
          kiss2Enabled: false,
          kiss3Enabled: false,
          canfieldExpertEnabled: false,
          canfieldMasterEnabled: false,
          mentorEnabled: false,
          rekoEnabled: false,
          silverFoxEnabled: false,
          ubz2Enabled: false,
          revereAdvPlusMinusEnabled: false,
          reverePointCountEnabled: false,
          revereApcEnabled: false,
          revere14Enabled: false,
          ustonAdvPlusMinusEnabled: false,
          ustonApcEnabled: false,
          ustonSsEnabled: false,
        ));

  void setDeckQuantity(value) => emit(CountSettingsState(
        deckQuantity: value,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: state.hiLoEnabled,
        hiOpt1Enabled: state.hiOpt1Enabled,
        hiOpt2Enabled: state.hiOpt2Enabled,
        halvesEnabled: state.halvesEnabled,
        koEnabled: state.koEnabled,
        red7Enabled: state.red7Enabled,
        zenEnabled: state.zenEnabled,
        omega2Enabled: state.omega2Enabled,
        thorps10Enabled: state.thorps10Enabled,
        acefiveEnabled: state.acefiveEnabled,
        kiss1Enabled: state.kiss1Enabled,
        kiss2Enabled: state.kiss2Enabled,
        kiss3Enabled: state.kiss3Enabled,
        canfieldExpertEnabled: state.canfieldExpertEnabled,
        canfieldMasterEnabled: state.canfieldMasterEnabled,
        mentorEnabled: state.mentorEnabled,
        rekoEnabled: state.rekoEnabled,
        silverFoxEnabled: state.silverFoxEnabled,
        ubz2Enabled: state.ubz2Enabled,
        revereAdvPlusMinusEnabled: state.revereAdvPlusMinusEnabled,
        reverePointCountEnabled: state.reverePointCountEnabled,
        revereApcEnabled: state.revereApcEnabled,
        revere14Enabled: state.revere14Enabled,
        ustonAdvPlusMinusEnabled: state.ustonAdvPlusMinusEnabled,
        ustonApcEnabled: state.ustonApcEnabled,
        ustonSsEnabled: state.ustonSsEnabled,
      ));

  void setDeckPenetration(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: value,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: state.hiLoEnabled,
        hiOpt1Enabled: state.hiOpt1Enabled,
        hiOpt2Enabled: state.hiOpt2Enabled,
        halvesEnabled: state.halvesEnabled,
        koEnabled: state.koEnabled,
        red7Enabled: state.red7Enabled,
        zenEnabled: state.zenEnabled,
        omega2Enabled: state.omega2Enabled,
        thorps10Enabled: state.thorps10Enabled,
        acefiveEnabled: state.acefiveEnabled,
        kiss1Enabled: state.kiss1Enabled,
        kiss2Enabled: state.kiss2Enabled,
        kiss3Enabled: state.kiss3Enabled,
        canfieldExpertEnabled: state.canfieldExpertEnabled,
        canfieldMasterEnabled: state.canfieldMasterEnabled,
        mentorEnabled: state.mentorEnabled,
        rekoEnabled: state.rekoEnabled,
        silverFoxEnabled: state.silverFoxEnabled,
        ubz2Enabled: state.ubz2Enabled,
        revereAdvPlusMinusEnabled: state.revereAdvPlusMinusEnabled,
        reverePointCountEnabled: state.reverePointCountEnabled,
        revereApcEnabled: state.revereApcEnabled,
        revere14Enabled: state.revere14Enabled,
        ustonAdvPlusMinusEnabled: state.ustonAdvPlusMinusEnabled,
        ustonApcEnabled: state.ustonApcEnabled,
        ustonSsEnabled: state.ustonSsEnabled,
      ));

  void toggleShowCount(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: value,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: state.hiLoEnabled,
        hiOpt1Enabled: state.hiOpt1Enabled,
        hiOpt2Enabled: state.hiOpt2Enabled,
        halvesEnabled: state.halvesEnabled,
        koEnabled: state.koEnabled,
        red7Enabled: state.red7Enabled,
        zenEnabled: state.zenEnabled,
        omega2Enabled: state.omega2Enabled,
        thorps10Enabled: state.thorps10Enabled,
        acefiveEnabled: state.acefiveEnabled,
        kiss1Enabled: state.kiss1Enabled,
        kiss2Enabled: state.kiss2Enabled,
        kiss3Enabled: state.kiss3Enabled,
        canfieldExpertEnabled: state.canfieldExpertEnabled,
        canfieldMasterEnabled: state.canfieldMasterEnabled,
        mentorEnabled: state.mentorEnabled,
        rekoEnabled: state.rekoEnabled,
        silverFoxEnabled: state.silverFoxEnabled,
        ubz2Enabled: state.ubz2Enabled,
        revereAdvPlusMinusEnabled: state.revereAdvPlusMinusEnabled,
        reverePointCountEnabled: state.reverePointCountEnabled,
        revereApcEnabled: state.revereApcEnabled,
        revere14Enabled: state.revere14Enabled,
        ustonAdvPlusMinusEnabled: state.ustonAdvPlusMinusEnabled,
        ustonApcEnabled: state.ustonApcEnabled,
        ustonSsEnabled: state.ustonSsEnabled,
      ));

  void toggleSpeedCount(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: value,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: state.hiLoEnabled,
        hiOpt1Enabled: state.hiOpt1Enabled,
        hiOpt2Enabled: state.hiOpt2Enabled,
        halvesEnabled: state.halvesEnabled,
        koEnabled: state.koEnabled,
        red7Enabled: state.red7Enabled,
        zenEnabled: state.zenEnabled,
        omega2Enabled: state.omega2Enabled,
        thorps10Enabled: state.thorps10Enabled,
        acefiveEnabled: state.acefiveEnabled,
        kiss1Enabled: state.kiss1Enabled,
        kiss2Enabled: state.kiss2Enabled,
        kiss3Enabled: state.kiss3Enabled,
        canfieldExpertEnabled: state.canfieldExpertEnabled,
        canfieldMasterEnabled: state.canfieldMasterEnabled,
        mentorEnabled: state.mentorEnabled,
        rekoEnabled: state.rekoEnabled,
        silverFoxEnabled: state.silverFoxEnabled,
        ubz2Enabled: state.ubz2Enabled,
        revereAdvPlusMinusEnabled: state.revereAdvPlusMinusEnabled,
        reverePointCountEnabled: state.reverePointCountEnabled,
        revereApcEnabled: state.revereApcEnabled,
        revere14Enabled: state.revere14Enabled,
        ustonAdvPlusMinusEnabled: state.ustonAdvPlusMinusEnabled,
        ustonApcEnabled: state.ustonApcEnabled,
        ustonSsEnabled: state.ustonSsEnabled,
      ));

  void setCardsPerSecond(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: value,
        isSpeedCountRunning: false,
        hiLoEnabled: state.hiLoEnabled,
        hiOpt1Enabled: state.hiOpt1Enabled,
        hiOpt2Enabled: state.hiOpt2Enabled,
        halvesEnabled: state.halvesEnabled,
        koEnabled: state.koEnabled,
        red7Enabled: state.red7Enabled,
        zenEnabled: state.zenEnabled,
        omega2Enabled: state.omega2Enabled,
        thorps10Enabled: state.thorps10Enabled,
        acefiveEnabled: state.acefiveEnabled,
        kiss1Enabled: state.kiss1Enabled,
        kiss2Enabled: state.kiss2Enabled,
        kiss3Enabled: state.kiss3Enabled,
        canfieldExpertEnabled: state.canfieldExpertEnabled,
        canfieldMasterEnabled: state.canfieldMasterEnabled,
        mentorEnabled: state.mentorEnabled,
        rekoEnabled: state.rekoEnabled,
        silverFoxEnabled: state.silverFoxEnabled,
        ubz2Enabled: state.ubz2Enabled,
        revereAdvPlusMinusEnabled: state.revereAdvPlusMinusEnabled,
        reverePointCountEnabled: state.reverePointCountEnabled,
        revereApcEnabled: state.revereApcEnabled,
        revere14Enabled: state.revere14Enabled,
        ustonAdvPlusMinusEnabled: state.ustonAdvPlusMinusEnabled,
        ustonApcEnabled: state.ustonApcEnabled,
        ustonSsEnabled: state.ustonSsEnabled,
      ));

  void startingSpeedCount(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: value,
        hiLoEnabled: state.hiLoEnabled,
        hiOpt1Enabled: state.hiOpt1Enabled,
        hiOpt2Enabled: state.hiOpt2Enabled,
        halvesEnabled: state.halvesEnabled,
        koEnabled: state.koEnabled,
        red7Enabled: state.red7Enabled,
        zenEnabled: state.zenEnabled,
        omega2Enabled: state.omega2Enabled,
        thorps10Enabled: state.thorps10Enabled,
        acefiveEnabled: state.acefiveEnabled,
        kiss1Enabled: state.kiss1Enabled,
        kiss2Enabled: state.kiss2Enabled,
        kiss3Enabled: state.kiss3Enabled,
        canfieldExpertEnabled: state.canfieldExpertEnabled,
        canfieldMasterEnabled: state.canfieldMasterEnabled,
        mentorEnabled: state.mentorEnabled,
        rekoEnabled: state.rekoEnabled,
        silverFoxEnabled: state.silverFoxEnabled,
        ubz2Enabled: state.ubz2Enabled,
        revereAdvPlusMinusEnabled: state.revereAdvPlusMinusEnabled,
        reverePointCountEnabled: state.reverePointCountEnabled,
        revereApcEnabled: state.revereApcEnabled,
        revere14Enabled: state.revere14Enabled,
        ustonAdvPlusMinusEnabled: state.ustonAdvPlusMinusEnabled,
        ustonApcEnabled: state.ustonApcEnabled,
        ustonSsEnabled: state.ustonSsEnabled,
      ));

  void toggleHiLo(value) => 
    emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: value,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,

      ));

  void toggleHiOpt1(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: value,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleHiOpt2(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: value,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleHalves(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: value,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleKo(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: value,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));
      
  void toggleRed7(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: value,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));
      
  void toggleZen(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: value,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleOmega2(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: value,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleThorps10(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: value,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleAceFive(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: value,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleKiss1(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: value,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleKiss2(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: value,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleKiss3(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: value,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleCanfieldExpert(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: value,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleCanfieldMaster(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: value,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleMentor(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: value,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleReko(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: value,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleSilverFox(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: value,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleUbz2(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: value,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleRevereAdvPlusMinus(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: value,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleReverePointCount(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: value,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleRevereApc(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: value,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleRevere14(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: value,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleUstonAdvPlusMinus(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: value,
        ustonApcEnabled: false,
        ustonSsEnabled: false,
      ));

  void toggleUstonApc(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: value,
        ustonSsEnabled: false,
      ));

  void toggleUstonSs(value) => emit(CountSettingsState(
        deckQuantity: state.deckQuantity,
        deckPenetration: state.deckPenetration,
        showCount: state.showCount,
        speedCountEnabled: state.speedCountEnabled,
        cardsPerSecond: state.cardsPerSecond,
        isSpeedCountRunning: false,
        hiLoEnabled: false,
        hiOpt1Enabled: false,
        hiOpt2Enabled: false,
        halvesEnabled: false,
        koEnabled: false,
        red7Enabled: false,
        zenEnabled: false,
        omega2Enabled: false,
        thorps10Enabled: false,
        acefiveEnabled: false,
        kiss1Enabled: false,
        kiss2Enabled: false,
        kiss3Enabled: false,
        canfieldExpertEnabled: false,
        canfieldMasterEnabled: false,
        mentorEnabled: false,
        rekoEnabled: false,
        silverFoxEnabled: false,
        ubz2Enabled: false,
        revereAdvPlusMinusEnabled: false,
        reverePointCountEnabled: false,
        revereApcEnabled: false,
        revere14Enabled: false,
        ustonAdvPlusMinusEnabled: false,
        ustonApcEnabled: false,
        ustonSsEnabled: value,
      ));

  getRules() => state;
}
